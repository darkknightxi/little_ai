# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/minibatch_training.ipynb.

# %% auto 0
__all__ = ['accuracy', 'report', 'Dataset', 'fit', 'get_dls']

# %% ../nbs/minibatch_training.ipynb 1
import pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt
from pathlib import Path
from torch import tensor,nn
import torch.nn.functional as F

# %% ../nbs/minibatch_training.ipynb 25
def accuracy(preds, targ): return (preds.argmax(dim=1, keepdim=False) == targ).float().mean()

# %% ../nbs/minibatch_training.ipynb 26
def report(loss, preds, yb): print(f'loss: {loss:.2f}, accuracy: {accuracy(preds, yb):.2f}')

# %% ../nbs/minibatch_training.ipynb 69
class Dataset():
    def __init__(self, x, y): self.x, self.y = x, y
    def __len__(self): return len(self.x)
    def __getitem__(self, i): return self.x[i], self.y[i]

# %% ../nbs/minibatch_training.ipynb 109
from torch.utils.data import DataLoader, BatchSampler, RandomSampler, SequentialSampler

# %% ../nbs/minibatch_training.ipynb 121
def fit(epochs, model, loss_func, opt, train_dl, valid_dl):
    for epoch in range(epochs):
        model.train()
        for xb, yb in train_dl:
            preds = model(xb)
            loss = loss_func(preds, yb)
            loss.backward()
            opt.step()
            opt.zero_grad()

        model.eval()
        with torch.no_grad():
            total_loss, total_acc, count = 0., 0., 0
            for xb, yb in valid_dl:
                n = len(xb)
                count += n
                preds = model(xb)
                total_loss += loss_func(preds, yb).item()*n
                total_acc += accuracy(preds, yb).item()*n
            print(f'epoch:{epoch}, loss:{total_loss/count}, accuracy:{total_acc/count}')
    return total_loss, total_acc

# %% ../nbs/minibatch_training.ipynb 122
def get_dls(train_ds, valid_ds, bs, **kwargs):
    return (DataLoader(train_ds, batch_size=bs, shuffle=True, **kwargs),
           DataLoader(valid_ds, batch_size=bs, **kwargs))
